diff --git a/index.js b/index.js
index 136a65b2da574627551e58db48223208548fbaea..194e08eaf8606847e5f8f91b2fd12c5f73e43fd6 100644
--- a/index.js
+++ b/index.js
@@ -32,8 +32,11 @@ export async function analyzeCommits(pluginConfig, context) {
   let releaseType = null;
 
   const parser = new CommitParser(config);
+
+  const parsedCommits = modifySquashedCommits({logger, commits});
+  debugger;
   const filteredCommits = filterRevertedCommitsSync(
-    commits
+    parsedCommits
       .filter(({ message, hash }) => {
         if (!message.trim()) {
           debug("Skip commit %s with empty message", hash);
@@ -87,3 +90,41 @@ export async function analyzeCommits(pluginConfig, context) {
 
   return releaseType;
 }
+
+function modifySquashedCommits(context) {
+  const { commits } = context;
+  const { logger } = context;
+
+  const modifiedCommits = [];
+
+  for (const commit of commits) {
+    logger.log('Commit: ' + commit.body);
+    logger.log('Subject: ' + commit.subject);
+    logger.log('Message: ' + commit.message);
+    const commitLines = commit.message.split('\n');
+    if (commitLines.length < 2) {
+      logger.log('Skipping github commit: ' + commit.message);
+      const newCommit = {
+        ...commit,
+      };
+      modifiedCommits.push(newCommit);
+    } else {
+      logger.log('Found github commit: ' + commit.message);
+
+      commitLines.shift();
+      commitLines.shift();
+      const [subject, , ...body] = commitLines;
+
+      const newCommit = {
+        ...commit,
+        subject,
+        body: body.join('\n'),
+        message: commitLines.join('\n'),
+      };
+      logger.log('Modified commit: ' + newCommit.message);
+      modifiedCommits.push(newCommit);
+    }
+  }
+
+  return modifiedCommits;
+}
